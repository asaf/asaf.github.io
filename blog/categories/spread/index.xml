<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spread on Asaf Shakarchi</title>
    <link>http://asaf.github.io/blog/categories/spread/</link>
    <description>Recent content in Spread on Asaf Shakarchi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://asaf.github.io/blog/categories/spread/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Add additional properties to a result of a function or a fucntion map using ES6 spread operator.</title>
      <link>http://asaf.github.io/blog/2015/09/13/add-additional-properties-to-a-result-of-a-function-or-a-fucntion-map-using-es6-spread-operator/</link>
      <pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://asaf.github.io/blog/2015/09/13/add-additional-properties-to-a-result-of-a-function-or-a-fucntion-map-using-es6-spread-operator/</guid>
      <description>&lt;p&gt;Sometimes it makes sense to add additional properties to a result of a function,&lt;/p&gt;

&lt;p&gt;Examples could be enhancing an operation result with some meta data, extending with a timestamp, run time, etc,&lt;/p&gt;

&lt;p&gt;Using ES6, we could easily achieve this by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;bindData(oper, props) {
  if (typeof oper === &#39;function&#39;) {
    return (...args) =&amp;gt; ({
      ...oper(...args),
      ...props
    });
  }
  if (typeof oper === &#39;object&#39;) {
    return Object.keys(oper).reduce((prev, key) =&amp;gt; ({
      ...prev,
      [key]: bindData(oper[key], props)
    }), {});
  }
  return oper;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some clarifications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;oper&lt;/code&gt; is a function, we decorate the original function by a closure,
&lt;code&gt;return (...args)&lt;/code&gt; is the closure (read more about the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34;&gt;spread&lt;/a&gt; operator.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, &lt;code&gt;myFunction(...args);&lt;/code&gt; is equelevent to &lt;code&gt;(args) { oper.apply(null, args); }&lt;/code&gt;,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the returned function is invoked, the result of the original function &lt;code&gt;...oper(...args)&lt;/code&gt; is then merged with the &lt;code&gt;props&lt;/code&gt; object, in other words:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;...oper(), ...props&lt;/code&gt; is equelevent to: &lt;code&gt;Object.assign({}, oper(), props);&lt;/code&gt;
Read more about &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&#34;&gt;Object.assign&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;oper&lt;/code&gt; is an object, we bind each of its key&amp;rsquo;s recursively (assuming each property is a function).&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>