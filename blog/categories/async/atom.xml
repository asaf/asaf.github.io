<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: async | Asaf Shakarchi]]></title>
  <link href="http://asaf.github.io/blog/categories/async/atom.xml" rel="self"/>
  <link href="http://asaf.github.io/"/>
  <updated>2014-09-19T07:05:54-07:00</updated>
  <id>http://asaf.github.io/</id>
  <author>
    <name><![CDATA[Asaf Shakarchi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Q promises with CoffeeScript]]></title>
    <link href="http://asaf.github.io/blog/2013/07/09/q-promises-with-coffeescript/"/>
    <updated>2013-07-09T06:03:00-07:00</updated>
    <id>http://asaf.github.io/blog/2013/07/09/q-promises-with-coffeescript</id>
    <content type="html"><![CDATA[<p>If you are using NodeJS (or for some other reasons you need to do many async invocations), then you probably came across <a href="Q%20Promises">&ldquo;https://github.com/kriskowal/q&rdquo;</a>.</p>

<p>Using Q with CoffeeScript is great as code blocks are much more organized and looks cleaner.</p>

<p>Here&rsquo;s an example:</p>

<p>Defining promises with CoffeeScript:</p>

<p>``` coffeescript
q = require &lsquo;q&rsquo;</p>

<p>exports.hello = () &ndash;>
  d = q.defer()
  d.resolve &lsquo;hello&rsquo;
  d.promise</p>

<p>exports.world = () &ndash;>
  d = q.defer()
  d.resolve &lsquo;world&rsquo;
  d.promise</p>

<p>exports.die = () &ndash;>
  d = q.defer()
  d.reject &lsquo;bye world&rsquo;
  d.promise
```</p>

<p>And here are Mocha sample of Q propagations and error handling</p>

<p>``` coffeescript
assert = require &lsquo;assert&rsquo;,
promises = require &lsquo;./promises&rsquo;</p>

<p>describe(&lsquo;Promises&rsquo;, () &ndash;>
  it &lsquo;Simple&rsquo;, (done) &ndash;></p>

<pre><code>promises.die().then(
  (val) =&gt;
    #handle val
  (err) =&gt;
    assert.equal err, 'bye world'
    done()
)
</code></pre>

<p>  it &lsquo;Test Promises Propagation&rsquo;, (done) &ndash;></p>

<pre><code>promises.hello().then(
  (val) =&gt;
    assert.equal val, 'hello'
    promises.world()
).then((val) =&gt;
    assert.equal val, 'world'
    done()
)
</code></pre>

<p>  it &lsquo;Test promises propagation with error&rsquo;, (done) &ndash;></p>

<pre><code>promises.hello().then(
  (val) =&gt;
    assert.equal val, 'hello'
    promises.die()
).then((val) =&gt;
    promises.world()
).then(
  (val) =&gt;
    #we wont get here
  (err) =&gt;
    assert.equal err, 'bye world'
    promises.world()
).then((val) =&gt;
  assert.equal val, 'world'
  done()
)
</code></pre>

<p>)
```</p>
]]></content>
  </entry>
  
</feed>
