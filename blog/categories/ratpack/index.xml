<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ratpack on Asaf Shakarchi</title>
    <link>http://asaf.github.io/blog/categories/ratpack/</link>
    <description>Recent content in Ratpack on Asaf Shakarchi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://asaf.github.io/blog/categories/ratpack/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello world using Ratpack.</title>
      <link>http://asaf.github.io/blog/2015/02/09/ratpack_hello_world/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://asaf.github.io/blog/2015/02/09/ratpack_hello_world/</guid>
      <description>

&lt;h2 id=&#34;about-ratpack&#34;&gt;About Ratpack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ratpack.io&#34;&gt;Ratpack&lt;/a&gt; is a set of Java libraries that facilitate fast, efficient, evolvable and well tested HTTP applications built on &lt;em&gt;Netty&lt;/em&gt; event driven networking engine,&lt;/p&gt;

&lt;p&gt;After crawling into its source code, I find it simple and easy to use and it feels right, why? because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s super simple, its core has very limited number of &lt;a href=&#34;https://github.com/ratpack/ratpack/blob/master/ratpack-core/ratpack-core.gradle&#34;&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Has out of the box extensions such as Guice, Jackson, etc, but nothing dictates you using them thanks to Guice modular architecture.&lt;/li&gt;
&lt;li&gt;Compatible with Java8 lambda syntax&lt;/li&gt;
&lt;li&gt;Testing is very easy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Code can be written in &lt;em&gt;Groovy&lt;/em&gt; or &lt;em&gt;Java&lt;/em&gt;, and since java8 lambda syntax is so pretty, I find it suitable for the Ratpack handlers architecture quit well.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s a simple hello world using &lt;em&gt;Ratpack&lt;/em&gt; and Java8,&lt;/p&gt;

&lt;h2 id=&#34;the-build-file-gradle&#34;&gt;The build file (Gradle)&lt;/h2&gt;

&lt;p&gt;While used to Maven, It feels like Ratpack folks like Gradle, so I said why not use it?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple &lt;em&gt;build.gradle&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath &amp;quot;io.ratpack:ratpack-gradle:0.9.13&amp;quot;
  }
}

apply plugin: &amp;quot;io.ratpack.ratpack-java&amp;quot;
apply plugin: &amp;quot;idea&amp;quot;

dependencies {
  //Ratpack uses slf4j for logging
  runtime &amp;quot;org.slf4j:slf4j-simple:1.7.5&amp;quot;
}

//we need this since 0.9.13 is based on snapshot version of Netty
repositories {
  jcenter()
    maven {
      url &amp;quot;http://clinker.netty.io/nexus/content/repositories/snapshots&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create basic directories&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p src/main/java
mkdir -p src/ratpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run in the command like &lt;code&gt;gradle idea&lt;/code&gt; to create Intellij project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gradle idea
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the things I mostly like about &lt;em&gt;Ratpack&lt;/em&gt; is that it has no real notion of a &amp;ldquo;container&amp;rdquo;, you can simply start it a plain &lt;em&gt;main&lt;/em&gt; method just like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import ratpack.server.RatpackServer;
import ratpack.server.ServerConfig;

/**
 */
public class Server {
    public static void main(String[] args) throws Exception {
        RatpackServer server = RatpackServer.of(b -&amp;gt; b
                        .serverConfig(ServerConfig.embedded()) //default config
                        .registryOf(r -&amp;gt; r.add(String.class, &amp;quot;world&amp;quot;))  // registry of supporting objects - optional
                        .handlers(chain -&amp;gt; chain                    // request handlers - required
                                        .get(&amp;quot;hello&amp;quot;, ctx -&amp;gt; ctx.render(ctx.get(String.class) + &amp;quot; !&amp;quot;))
                        )
        );

        server.start();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Server will start with on some available port and will print:
&lt;code&gt;Ratpack started for http://localhost:65478&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;now hit in the browser &lt;code&gt;http://localhost:65478/hello&lt;/code&gt; ! :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>